import matplotlib.pyplot as plt
import numpy as np
def is_safe(board, row, col, n):
    for i in range(row):
        if board[i] == col or \
            board[i] - i == col - row or \
            board[i] + i == col + row:
            return False
    return True
def solve_n_queens(n):
    def solve(row, board):
        if row == n:
            solutions.append(board[:])
            return
        for col in range(n):
            if is_safe(board, row, col, n):
                board[row] = col
                solve(row + 1, board)
    solutions = []
    solve(0, [-1]*n)
    return solutions
def visualize_solution(n, solution):
    board = np.zeros((n, n))
    for i, col in enumerate(solution):
        board[i, col] = 1
    plt.imshow(board, cmap='binary')
    plt.xticks([])
    plt.yticks([])
    plt.show([])
n_values = [4, 5, 8]
for n in n_values:
    solutions = solve_n_queens(n)
    print(f"N = {n}: {len(solutions)} solutions")
    for i, solution in enumerate(solutions):
        print(f"Solution {i+1}: {solution}")
        visualize_solution(n, solution)
        plt.title(f"N = {n}, Solution {i+1}")
        plt.show()
